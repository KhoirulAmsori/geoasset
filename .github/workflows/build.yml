name: Build GEO Asset
on:
  schedule:
    - cron: "0 17 * * *"
  workflow_dispatch:
  repository_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Build GEOIP
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./geoip-build/go.mod
          cache-dependency-path: ./geoip-build/go.sum
        env:
          GOPATH: /tmp/go-geoip-build

      - name: Set variables
        run: |
          # Set timezone to Asia/Jakarta
          export TZ="Asia/Jakarta"
          echo "TAG_NAME=$(date +'%d%m%Y-%H%M')" >> $GITHUB_ENV
          echo "RELEASE_NAME=$(date +'%d%m%Y-%H%M')" >> $GITHUB_ENV
          echo "OISD_SMALL=https://small.oisd.nl/dnsmasq" >> $GITHUB_ENV
        shell: bash

      - name: Download GeoLite2 databases
        env:
          LICENSE_KEY: ${{ secrets.MAXMIND_GEOLITE2_LICENSE }}
        run: |
          mkdir -p output
          #curl -L "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-ASN&license_key=${LICENSE_KEY}&suffix=tar.gz" -o ./output/GeoLite2-ASN.tar.gz
          #curl -L "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-ASN-CSV&license_key=${LICENSE_KEY}&suffix=zip" -o ./output/GeoLite2-ASN-CSV.zip
          #curl -L "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-Country&license_key=${LICENSE_KEY}&suffix=tar.gz" -o ./output/GeoLite2-Country.tar.gz
          #curl -L "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-Country-CSV&license_key=${LICENSE_KEY}&suffix=zip" -o ./output/GeoLite2-Country-CSV.zip

          cp ./geoip-build/asset/* ./output/

      - name: Prepare GeoLite2 databases
        run: |
          cd geoip-build
          mkdir -p geolite2
          cp ../output/{*.gz,*.zip} ./
          
          unzip GeoLite2-Country-CSV.zip
          unzip GeoLite2-ASN-CSV.zip
          tar -xvzf GeoLite2-Country.tar.gz
          tar -xvzf GeoLite2-ASN.tar.gz
          
          cp GeoLite2-Country_*/*.mmdb ../output/
          cp GeoLite2-ASN_*/*.mmdb ../output/
          cp GeoLite2-Country-CSV_*/{GeoLite2-Country-Blocks-*,GeoLite2-Country-Locations-en}.csv ../output/
          cp GeoLite2-ASN-CSV_*/*.csv ../output/

          cp GeoLite2-Country-CSV_*/*.csv ./geolite2/
          cp GeoLite2-ASN-CSV_*/*.csv ./geolite2/

      - name: Build geoip files
        run: |
          cd ./geoip-build/
          go build ./
          ./geoip convert -c ./config.json

      # Build GEOSITE
      - name: Checkout v2fly/domain-list-community
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          repository: v2fly/domain-list-community
          path: community

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./geosite-build/go.mod
          cache-dependency-path: ./geosite-build/go.sum
        env:
          GOPATH: /tmp/go-geosite-build

      - name: Create lists
        run: |
          curl -sSL $OISD_SMALL | perl -ne '/^server=\/([^\/]+)\// && print "$1\n"' > ./community/data/oisd-small

      - name: Build geosite.dat file
        run: |
          cd geosite-build
          go run ./ --datapath=../community/data

      - name: Remove some files to avoid publishing to GitHub release
        run: |
          rm -rf ./output/lokal.txt
          rm -rf ./output/*.{gz,zip}
          rm -rf ./output/GeoLite2-*.csv
          rm -rf ./output/GeoLite2-*.mmdb
          rm -rf ./output/{clash,dat,text}

      - name: Move files
        run: |
          install -Dp ./geosite-build/publish/geosite.dat ./output/geosite.dat

      - name: Purge jsdelivr CDN
        run: |
          cd output || exit 1
          for file in $(ls); do
            curl -i "https://purge.jsdelivr.net/gh/${{ github.repository }}@release/${file}"
          done

      - name: Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ env.RELEASE_NAME }}
          tag_name: ${{ env.TAG_NAME }}
          draft: false
          prerelease: false
          files: ./output/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete Old Release
        uses: dev-drprasad/delete-older-releases@v0.3.4
        with:
          repo: KhoirulAmsori/geoasset
          keep_latest: 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



